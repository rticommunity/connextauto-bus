/******************************************************************************
(C) Copyright 2020-2022 Real-Time Innovations, Inc.  All rights reserved.

The use of this software is governed by the terms specified in the 
RTI Labs License Agreement, available at https://www.rti.com/terms/RTILabs. 

By accessing, downloading, or otherwise using this software, you agree to 
be bound by those terms.
*****************************************************************************/

#ifndef POINTCLOUD_IDL
#define POINTCLOUD_IDL

#include "res/types/data/base/Primitives_t.idl"
#include "res/types/data/physics/Point3D_t.idl"
#include "res/types/data/physics/Time_t.idl"

module dds {
    module sensing {
        /**  
         *  Based on the LAS Format v1.4
         *  http://www.asprs.org/wp-content/uploads/2019/07/LAS_1_4_r15.pdf
         *  
         *  ASPRS LASER (LAS) FILE FORMAT EXCHANGE ACTIVITIES
         *  https://www.asprs.org/divisions-committees/lidar-division/laser-las-file-format-exchange-activities  
         */
        module pointcloud {   
           /**
             * Information about the return of the laser pulse
             * NOTE: bitsets are currently not supported by rtiddsgen
             */
            /*
            bitset PulseReturnBitset {
                bitfield<3>   return_number;       // bits 0-2
                bitfield>3>   number_of_returns;   // bits 3-5
                bitfield<1>   scan_direction;      // bit 6
                bitfield<1>   edge_of_flight_line; // bit 7
            };
            */
            typedef base::Byte PulseReturnBitset;

            /**
             * Point Data Record - Format 1 (28 bytes)
             */
            @nested
            struct PointDataRecord : physics::Point3D_integer {
                base::UInt16 intensity;
                PulseReturnBitset pulse_return;
                base::UInt16 classification;
                base::UInt16 scan_angle_rank;
                base::Byte user_data;
                base::UInt16 point_source_id;
                physics::Time_real gps_time;
            };

            /* Max Content Size */
            const base::Int16 MAX_POINT_DATA_RECORDS = 4 * 1024;

            /**
            * A collection of discrete return LiDAR points is known as a 
            * LiDAR point cloud.
            *
            *      x[i] = scale.x * point[i].x  + offset.x
            *      y[i] = scale.y * point[i].y  + offset.y
            *      z[i] = scale.z * point[i].z  + offset.z
            */
            @nested
            struct PointCloud {
                physics::Point3D_real scale;
                physics::Point3D_real offset;
                physics::Point3D_real point_max;
                physics::Point3D_real point_min;
                
                /* These fields contain an array of the total point records per
                   return. The first value will be the total number of records
                   from the first return, the second contains the total number
                   for return two, and so on up to fifteen returns */
                base::UInt64 point_return_count[15];

                /* point cloud data */
                sequence<PointDataRecord, MAX_POINT_DATA_RECORDS> point; 
            };
        };
    };
};

#endif /* POINTCLOUD_IDL */
